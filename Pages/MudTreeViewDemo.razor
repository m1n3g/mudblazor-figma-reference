@page "/components/treeview"
@using System.Collections.ObjectModel
@using MudBlazor

<MudStack Row Wrap="Wrap.Wrap" Class="justify-left">
    <MudSwitch @bind-Value="ReadOnly" Color="Color.Primary">ReadOnly</MudSwitch>
    <MudSwitch @bind-Value="Hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="Ripple" Color="Color.Primary">Ripple</MudSwitch>
    <MudSwitch @bind-Value="Dense" Color="Color.Primary">Dense</MudSwitch>
    <MudSwitch @bind-Value="Disabled" Color="Color.Primary">Disabled</MudSwitch>
    <MudSwitch @bind-Value="ExpandOnClick" Color="Color.Primary">ExpandOnClick</MudSwitch>
    <MudSwitch @bind-Value="ExpandOnDoubleClick" Color="Color.Primary">ExpandOnDoubleClick</MudSwitch>
    <MudSwitch @bind-Value="TriState" Color="Color.Info">TriState</MudSwitch>
    <MudSwitch @bind-Value="AutoSelectParent" Color="Color.Info">AutoSelectParent</MudSwitch>
</MudStack>

<MudPaper Class="my-3" Width="300px" Elevation="0">
    <MudTreeView ServerData="@LoadServerData" Items="@InitialTreeItems">
        <ItemTemplate>
            <MudTreeViewItem Value="@context.Value" Items="@context.Children"
                ItemsChanged="@(new Action<IReadOnlyCollection<TreeItemData<string>>>(items => OnItemsLoaded(context, items)))"
                @bind-Expanded="@context.Expanded" CanExpand="@context.Expandable" Icon="@context.Icon"
                LoadingIconColor="Color.Info" />
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

<MudDivider />

<MudPaper Width="300px" Elevation="0">
    <MudTreeView T="string" ReadOnly="@ReadOnly" Hover="@Hover" Dense="@Dense" Disabled="@Disabled"
        ExpandOnClick="@ExpandOnClick" ExpandOnDoubleClick="@ExpandOnDoubleClick" TriState="@TriState"
        AutoSelectParent="@AutoSelectParent" CheckBoxColor="Color.Info" @bind-SelectedValues="SelectedValues"
        SelectionMode="SelectionMode.MultiSelection">
        <MudTreeViewItem Icon="@Icons.Material.Filled.FolderZip" IconColor="Color.Success"
            Text="Inside TreeView Without Nested" />
        <MudTreeViewItem Icon="@Icons.Material.Filled.FolderZip" Text="Applications" Expanded
            ExpandButtonIcon="@Icons.Material.Filled.ArrowRight" ExpandButtonIconColor="Color.Primary">
            <MudTreeViewItem Icon="@Icons.Material.Filled.FolderZip" IconColor="Color.Secondary" Text="Terminal" />
        </MudTreeViewItem>
        <MudTreeViewItem Text="Documents" Expanded>
            <MudTreeViewItem Text="MudBlazor" Expanded>
                <MudTreeViewItem Value='"tasks.json"' />
                <MudTreeViewItem Value='"launch.json"' />
                <MudTreeViewItem Value='"logo.png"' />
            </MudTreeViewItem>
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>


@code {
    public bool ReadOnly = false;
    public bool Hover = true;
    public bool Ripple;
    public bool Dense;
    public bool Disabled;
    public bool ExpandOnClick = true;
    public bool ExpandOnDoubleClick;
    public bool TriState = true;
    public bool AutoSelectParent = true;
    public IReadOnlyCollection<string> SelectedValues = ["tasks.json", "launch.json"];

    private List<TreeItemData<string>> InitialTreeItems { get; set; } = new();
    private int _idCounter = 1; // <- the counter makes sure the generated items are unique

    protected override void OnInitialized()
    {
        // MudTreeView initially only gets these top-level items
        InitialTreeItems.Add(new TreeItemData<string>
        {
            Value = "All Mail",
            Expanded = true,
            Children = [
        new TreeItemData<string> { Value = "Test with this Loading", Icon = Icons.Material.Filled.Group, },
]
        });
    }

    public async Task<IReadOnlyCollection<TreeItemData<string>>> LoadServerData(string parentValue)
    {
        // wait 500ms to simulate a server load
        await Task.Delay(500);
        // normally you would use the parentValue to query your server for the children of the given parent
        // but for the sake of this example we will just return some hardcoded children
        return [
        new TreeItemData<string> { Value = $"More Spam ({_idCounter++})", Icon = Icons.Material.Filled.Group, },
    new TreeItemData<string> { Value = $"L.E.D Door Mats ({_idCounter++})", Icon = Icons.Material.Outlined.Lightbulb,
    Expandable = false },
    new TreeItemData<string> { Value = $"Car Beauty Salon ({_idCounter++})", Icon = Icons.Material.Filled.CarRepair,
    Expandable = false },
    new TreeItemData<string> { Value = $"Fakedoors.com ({_idCounter++})", Icon = Icons.Material.Outlined.DoorFront,
    Expandable = false },
    new TreeItemData<string> { Value = $"Bluetooth Toilet ({_idCounter++})", Icon = Icons.Material.Filled.Wc, Expandable =
    false }
        ];
    }

    private void OnItemsLoaded(TreeItemData<string> treeItemData, IReadOnlyCollection<TreeItemData<string>> children)
    {
        // here we store the server-loaded children in the treeItemData so that they are available in the InitialTreeItems
        // if you don't do this you loose already loaded children on next render update
        treeItemData.Children = children?.ToList();
    }
}