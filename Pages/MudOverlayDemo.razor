@page "/components/overlay"

<MudGrid GutterSize="GutterSize.Small">

    <!-- Controls (container overlay) -->
    <MudItem xs="12" md="6" lg="4">
        <MudPaper Class="pa-5" Elevation="25">
            <MudText Typo="Typo.h6" Class="mb-2">Container Overlay</MudText>

            <MudSwitch Color="Color.Primary" @bind-Value="_containerVisible">Show overlay</MudSwitch>
            <MudSwitch Color="Color.Primary" @bind-Value="_containerClickToClose">Click to close</MudSwitch>
            <MudSwitch Color="Color.Primary" @bind-Value="_containerShowLoader">Show loader</MudSwitch>

            <MudSelect T="Backdrop" Label="Background" @bind-Value="_containerBackdrop" Class="mt-2">
                <MudSelectItem Value="Backdrop.Dark">Dark</MudSelectItem>
                <MudSelectItem Value="Backdrop.Light">Light</MudSelectItem>
            </MudSelect>

            <MudSlider T="int" Label="Opacity (%)" @bind-Value="_containerOpacityPct" Min="0" Max="100" Step="5" Class="mt-2" />
            <MudSlider T="int" Label="Blur (px)"   @bind-Value="_containerBlurPx"   Min="0" Max="12"  Step="1" Class="mt-2" />
            <MudNumericField T="int" Label="z-index" @bind-Value="_containerZ" Min="1" Max="9999" Immediate Class="mt-2" />
        </MudPaper>
    </MudItem>

    <!-- Live container with overlay -->
    <MudItem xs="12" md="6" lg="8">
        <MudPaper Class="pa-5" Style="position:relative; min-height:260px;" Elevation="25">
            <MudText Typo="Typo.subtitle1" Class="mb-2">Content area</MudText>
            <MudText Typo="Typo.body2">This paper acts as the overlay’s container. Toggle the overlay to see it cover only this section.</MudText>

            <MudOverlay Visible="@_containerVisible"
                        Class="d-flex justify-center align-center"
                        Style="@GetOverlayStyle(_containerBackdrop, _containerOpacityPct, _containerBlurPx, _containerZ)"
                        @onclick="@(() => { if (_containerClickToClose) _containerVisible = false; })">
                @if (_containerShowLoader)
                {
                    <MudStack AlignItems="AlignItems.Center" Spacing="1">
                        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                        <MudText Typo="Typo.caption">Loading…</MudText>
                    </MudStack>
                }
            </MudOverlay>
        </MudPaper>
    </MudItem>

    <!-- Controls (full-screen overlay) -->
    <MudItem xs="12" md="6" lg="4">
        <MudPaper Class="pa-5" Elevation="25">
            <MudText Typo="Typo.h6" Class="mb-2">Full-Screen Overlay</MudText>

            <MudSwitch Color="Color.Primary" @bind-Value="_fullVisible">Show overlay</MudSwitch>
            <MudSwitch Color="Color.Primary" @bind-Value="_fullClickToClose">Click to close</MudSwitch>
            <MudSwitch Color="Color.Primary" @bind-Value="_fullShowLoader">Show loader</MudSwitch>

            <MudSelect T="Backdrop" Label="Background" @bind-Value="_fullBackdrop" Class="mt-2">
                <MudSelectItem Value="Backdrop.Dark">Dark</MudSelectItem>
                <MudSelectItem Value="Backdrop.Light">Light</MudSelectItem>
            </MudSelect>

            <MudSlider T="int" Label="Opacity (%)" @bind-Value="_fullOpacityPct" Min="0" Max="100" Step="5" Class="mt-2" />
            <MudSlider T="int" Label="Blur (px)"   @bind-Value="_fullBlurPx"   Min="0" Max="12"  Step="1" Class="mt-2" />
            <MudNumericField T="int" Label="z-index" @bind-Value="_fullZ" Min="1" Max="9999" Immediate Class="mt-2" />
        </MudPaper>
    </MudItem>

    <!-- Full-screen overlay itself -->
    <MudItem xs="12" md="6" lg="8">
        <MudPaper Class="pa-5" Elevation="25">
            <MudText Typo="Typo.subtitle1" Class="mb-1">Note</MudText>
            <MudText Typo="Typo.body2">This overlay covers the entire viewport. Use z-index if it appears under other elements like app bars or drawers.</MudText>
        </MudPaper>

        @if (_fullVisible)
        {
            <MudOverlay Visible="true"
                        Class="d-flex justify-center align-center"
                        Style="@GetFullscreenStyle(_fullBackdrop, _fullOpacityPct, _fullBlurPx, _fullZ)"
                        @onclick="@(() => { if (_fullClickToClose) _fullVisible = false; })">
                @if (_fullShowLoader)
                {
                    <MudStack AlignItems="AlignItems.Center" Spacing="1">
                        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                        <MudText Typo="Typo.caption">Please wait…</MudText>
                    </MudStack>
                }
            </MudOverlay>
        }
    </MudItem>
</MudGrid>

@code {
    // Simple backdrop options
    private enum Backdrop { Dark, Light }

    // Container overlay state
    private bool _containerVisible;
    private bool _containerClickToClose = true;
    private bool _containerShowLoader = true;
    private Backdrop _containerBackdrop = Backdrop.Dark;
    private int _containerOpacityPct = 50;
    private int _containerBlurPx = 2;
    private int _containerZ = 1300;

    // Full-screen overlay state
    private bool _fullVisible;
    private bool _fullClickToClose = true;
    private bool _fullShowLoader = true;
    private Backdrop _fullBackdrop = Backdrop.Dark;
    private int _fullOpacityPct = 40;
    private int _fullBlurPx = 0;
    private int _fullZ = 1400;

    // Style builders
    private string GetOverlayStyle(Backdrop backdrop, int opacityPct, int blurPx, int z) =>
        $"position:absolute; inset:0; z-index:{z}; " +
        $"background-color:{ColorFromBackdrop(backdrop, opacityPct)}; " +
        BackdropFilter(blurPx);

    private string GetFullscreenStyle(Backdrop backdrop, int opacityPct, int blurPx, int z) =>
        $"position:fixed; inset:0; z-index:{z}; " +
        $"background-color:{ColorFromBackdrop(backdrop, opacityPct)}; " +
        BackdropFilter(blurPx);

    private static string ColorFromBackdrop(Backdrop b, int opacityPct)
    {
        var a = Math.Clamp(opacityPct, 0, 100) / 100.0;
        return b == Backdrop.Dark
            ? $"rgba(33,33,33,{a:0.##})"
            : $"rgba(255,255,255,{a:0.##})";
    }

    private static string BackdropFilter(int blurPx)
        => blurPx <= 0 ? "" : $"backdrop-filter:blur({blurPx}px); -webkit-backdrop-filter:blur({blurPx}px);";
}
