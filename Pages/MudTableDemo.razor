@page "/components/table"

@using System.Net.Http.Json
@using System.Linq
@using MudBlazor
@inject HttpClient httpClient
@inject ISnackbar Snackbar

<style>
    .selected { background-color: #1E88E5 !important; }
    .selected > td { color: white !important; }
    .selected > td .mud-input { color: white !important; }
</style>

<MudTable T="Element"
          Items="@Elements.Take(99)"
          Breakpoint="Breakpoint.Xs"
          Loading="@_loading"
          LoadingProgressColor="Color.Info"
          @ref="mudTable"
          RowClass="cursor-pointer"
          RowClassFunc="@SelectedRowClassFunc"
          OnRowClick="OnRowClick"
          Dense="@dense"
          Hover="@hover"
          Bordered="@bordered"
          Striped="@striped"
          Filter="new Func<Element,bool>(FilterFunc1)"
          @bind-SelectedItem="selectedItem1"
          @bind-SelectedItems="selectedItems"
          SortLabel="Sort By"
          MultiSelection="@multiselection"
          SelectionChangeable="@_selectionChangeable"
          FixedHeader="@fixed_header"
          FixedFooter="@fixed_footer"
          Height="@(fixed_header || fixed_footer ? "400px" : null)"
          ReadOnly="@ronly"
          CanCancelEdit="@canCancelEdit"
          CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(EventCallback.Factory.Create(this, CommitEditClicked))"
          RowEditPreview="BackupItem"
          RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          IsEditRowSwitchingBlocked="@blockSwitch"
          ApplyButtonPosition="@applyButtonPosition"
          EditButtonPosition="@editButtonPosition"
          EditTrigger="@editTrigger"
          Expandable="true"
          HorizontalScrollbar="@horizontalScrollbar"
          Virtualize="@virtualize">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField Value="@searchString1"
                      ValueChanged="EventCallback.Factory.Create<string>(this, OnSearchChanged)"
                      DebounceInterval="200"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0" />
    </ToolBarContent>

    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x => x.Number)">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<Element, object>(x => x.Sign)">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Element, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x => x.Position)">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x => x.Molar)" Style="text-align:center">Mass</MudTableSortLabel></MudTh>
        <MudTh>Actions</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Element, object>(x => x.Molar)" Style="text-align:center">Column 7 Test for sort width</MudTableSortLabel></MudTh>
        <MudTh>Column 8</MudTh>
        <MudTh>Column 9</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Number</MudTd>
        <MudTd DataLabel="Sign">@context.Sign</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Position" HideSmall="_hidePosition">@context.Position</MudTd>
        <MudTd DataLabel="Molar mass">@context.Molar</MudTd>
        <MudTd DataLabel="Molar mass">TestLonggggggggggggggggggggg</MudTd>
        <MudTd DataLabel="Molar mass">TestLonggggggggggggggggggggg</MudTd>
        <MudTd DataLabel="Molar mass">@context.Molar</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ToggleDetails(context))">
                @(context.ShowDetails ? "Hide" : "Show") Details
            </MudButton>
        </MudTd>
    </RowTemplate>

    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTd ColSpan="6" Style="padding:0;">
                <MudCard Style="width:100%; margin:0;">
                    <MudCardContent Class="pa-3">
                        <MudText Typo="Typo.h6">@context.Name - Full Details</MudText>
                        <MudDivider Class="my-2" />
                        <MudText><b>Atomic Number:</b> @context.Number</MudText>
                        <MudText><b>Symbol:</b> @context.Sign</MudText>
                        <MudText><b>Molar Mass:</b> @context.Molar g/mol</MudText>
                        <MudText><b>Periodic Position:</b> @context.Position</MudText>
                    </MudCardContent>
                </MudCard>
            </MudTd>
        }
    </ChildRowContent>

    <PagerContent>
        @if (showPager)
        {
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                           RowsPerPageString="@rowsPerPageString"
                           InfoFormat="@infoFormat"
                           AllItemsText="@allItemsText"
                           HorizontalAlignment="@horizontalAlignment"
                           HideRowsPerPage="@hideRowsPerPage"
                           HidePageNumber="@hidePageNumber"
                           HidePagination="@hidePagination" />
        }
    </PagerContent>

    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small"
                       Icon="@Icons.Material.Outlined.Edit"
                       Class="pa-0"
                       OnClick="@button.ButtonAction"
                       Disabled="@button.ButtonDisabled" />
    </EditButtonContent>

    <FooterContent>
        <MudTd ColSpan="5">Select All</MudTd>
    </FooterContent>
</MudTable>

<MudStack Class="pa-3" Row="true">
    <MudText Class="pa-2 mr-4">Selected1: @selectedItem1?.Name</MudText>
    <MudText Class="pa-2 mr-4">Item: @_selectedItemText</MudText>
    <MudText Class="pa-2 mr-4">
        Selected items (@selectedItems?.Count):
        @(selectedItems == null ? "" : string.Join(", ", selectedItems.OrderBy(x => x.Sign).Select(x => x.Sign)))
    </MudText>
</MudStack>

<MudGrid>
    <MudItem xs="12" md="4">
        <MudText Class="mb-3" Typo="Typo.h6">Options:</MudText>
        <MudSwitch @bind-Value="_hidePosition" Color="Color.Primary">Hide position when Breakpoint=Xs</MudSwitch>
        <MudSwitch @bind-Value="_loading" Color="Color.Primary">Show Loading</MudSwitch>
        <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Value="ronly" Color="Color.Tertiary">Read Only</MudSwitch>
        <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudSwitch @bind-Value="horizontalScrollbar" Color="Color.Primary">Horizontal Scrolling</MudSwitch>
        <MudSwitch @bind-Value="virtualize" Color="Color.Primary">Table Virtualization</MudSwitch>

        <MudText Class="mb-3" Typo="Typo.h6">Sorting:</MudText>
        <MudSwitch @bind-Value="enabled" Color="Color.Info">Enable sorting on the Sign Column</MudSwitch>

        <MudText Class="mb-3" Typo="Typo.h6">Multi-Selection:</MudText>
        <MudSwitch @bind-Value="_selectOnRowClick" Color="Color.Primary">Select on row click</MudSwitch>
        <MudSwitch @bind-Value="_selectionChangeable" Color="Color.Primary">Selection is changeable</MudSwitch>
        <MudSwitch @bind-Value="multiselection" Color="Color.Info">Multi Selection</MudSwitch>

        <MudText Class="mb-3" Typo="Typo.h6">Fixed header and footer:</MudText>
        <MudSwitch @bind-Value="fixed_header" Color="Color.Primary">Fixed Header</MudSwitch>
        <MudSwitch @bind-Value="fixed_footer" Color="Color.Primary">Fixed Footer</MudSwitch>
    </MudItem>

    <MudItem xs="12" md="4">
        <MudText Class="mb-3" Typo="Typo.h6">TablePager Customization:</MudText>
        <MudSwitch @bind-Value="showPager" Color="Color.Primary">Show Table Pager</MudSwitch>
        <MudSelect Class="mb-2" T="HorizontalAlignment" Label="HorizontalAlignment" @bind-Value="horizontalAlignment">
            <MudSelectItem Value="HorizontalAlignment.Center" />
            <MudSelectItem Value="HorizontalAlignment.Left" />
            <MudSelectItem Value="HorizontalAlignment.Right" />
            <MudSelectItem Value="HorizontalAlignment.Start" />
            <MudSelectItem Value="HorizontalAlignment.End" />
        </MudSelect>
        <MudTextField Class="mb-2" Label="RowsPerPageString" @bind-Value="rowsPerPageString" Immediate />
        <MudTextField Class="mb-2" Label="AllItemsText" @bind-Value="allItemsText" Immediate />
        <MudTextField Class="mb-2" Label="InfoFormat" @bind-Value="infoFormat" Immediate />

        <MudSwitch @bind-Value="hideRowsPerPage" Color="Color.Tertiary">HideRowsPerPage</MudSwitch>
        <MudSwitch @bind-Value="hidePageNumber" Color="Color.Primary">HidePageNumber</MudSwitch>
        <MudSwitch @bind-Value="hidePagination" Color="Color.Secondary">HidePagination</MudSwitch>
    </MudItem>

    <MudItem xs="12" md="4">
        <MudText Class="mb-3" Typo="Typo.h6">Inline Edit Mode (Not function use another):</MudText>
        <MudSelect Class="mb-2" Label="Edit Trigger" T="TableEditTrigger" @bind-Value="editTrigger">
            <MudSelectItem Value="TableEditTrigger.RowClick">Row Click</MudSelectItem>
            <MudSelectItem Value="TableEditTrigger.EditButton">Edit Button</MudSelectItem>
        </MudSelect>

        @if (editTrigger == TableEditTrigger.EditButton)
        {
            <MudSelect Class="mb-2" Label="Edit Button Position" T="TableEditButtonPosition" @bind-Value="editButtonPosition">
                <MudSelectItem Value="TableEditButtonPosition.Start">Start</MudSelectItem>
                <MudSelectItem Value="TableEditButtonPosition.End">End</MudSelectItem>
                <MudSelectItem Value="TableEditButtonPosition.StartAndEnd">Start and End</MudSelectItem>
            </MudSelect>
        }

        <MudSelect Class="mb-2" Label="Apply Button Position" T="TableApplyButtonPosition" @bind-Value="applyButtonPosition">
            <MudSelectItem Value="TableApplyButtonPosition.Start">Start</MudSelectItem>
            <MudSelectItem Value="TableApplyButtonPosition.End">End</MudSelectItem>
            <MudSelectItem Value="TableApplyButtonPosition.StartAndEnd">Start and End</MudSelectItem>
        </MudSelect>

        <MudSwitch Class="mb-2" @bind-Value="canCancelEdit" Color="Color.Info">Can Cancel Edit</MudSwitch>
        <MudSwitch Class="mb-2" @bind-Value="blockSwitch" Color="Color.Success">Block Edit Row Switching</MudSwitch>
    </MudItem>
</MudGrid>

<MudExpansionPanels Style="flex:1;">
    <MudExpansionPanel Text="Show inline-clicked event log">
        @foreach (var message in clickedEvents)
        {
            <MudText>@message</MudText>
        }
        @if (clickedEvents.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => clickedEvents.Clear())">
                    Clear events
                </MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private List<string> editEvents = new();
    private bool _hidePosition;
    private bool _loading;
    private int selectedRowNumber = -1;
    private MudTable<Element>? mudTable;
    private List<string> clickedEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private bool enabled = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private bool multiselection = true;
    private string searchString1 = "";
    private Element? selectedItem1;
    private Element elementBeforeEdit = new();
    bool fixed_header = true;
    bool fixed_footer = false;
    bool horizontalScrollbar = false;
    bool virtualize = false;
    private bool showPager = true;
    private HashSet<Element> selectedItems = new();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;

    private bool _selectOnRowClick = true;
    private bool _selectionChangeable = true;
    private string _selectedItemText = "No row clicked";

    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    private IEnumerable<Element> Elements = new List<Element>
    {
        new() { Number = 1, Sign = "H",  Name = "Hydrogen", Position = 0,  Molar = 1.00794 },
        new() { Number = 2, Sign = "He", Name = "Helium",   Position = 17, Molar = 4.002602 },
        new() { Number = 3, Sign = "Li", Name = "Lithium",  Position = 0,  Molar = 6.941 }
    };

    private void CommitEditClicked() => Snackbar.Add("Commit Edit Handler Invoked");

    private void OnRowClick(TableRowClickEventArgs<Element> args)
    {
        _selectedItemText = $"{args.Item?.Name} ({args.Item?.Sign})";
        clickedEvents.Add("Row has been clicked");
    }

    private string SelectedRowClassFunc(Element element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable?.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        return string.Empty;
    }

    private bool FilterFunc1(Element element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Element element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.Sign?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if (element.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true) return true;
        if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }

    private async Task OnSearchChanged(string text)
    {
        searchString1 = text;
        mudTable?.SetRowsPerPage(mudTable.RowsPerPage); // force client-side refresh
        await Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        var apiElements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
        if (apiElements != null && apiElements.Count > 0)
        {
            Elements = apiElements;
            foreach (var e in Elements) e.ShowDetails = false;
        }
    }

    private void ClearEventLog() => editEvents.Clear();

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            Sign = ((Element)element).Sign,
            Name = ((Element)element).Name,
            Molar = ((Element)element).Molar,
            Position = ((Element)element).Position
        };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((Element)element).Name}");
    }

    private void ItemHasBeenCommitted(object element)
        => AddEditionEvent($"RowEditCommit event: Changes to Element {((Element)element).Name} committed");

    private void ResetItemToOriginalValues(object element)
    {
        ((Element)element).Sign = elementBeforeEdit.Sign;
        ((Element)element).Name = elementBeforeEdit.Name;
        ((Element)element).Molar = elementBeforeEdit.Molar;
        ((Element)element).Position = elementBeforeEdit.Position;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((Element)element).Name} canceled");
    }

    public class Element
    {
        public int Number { get; set; }
        public string? Sign { get; set; }
        public string? Name { get; set; }
        public int Position { get; set; }
        public double Molar { get; set; }
        public bool ShowDetails { get; set; } // for expandable rows
    }

    private void ToggleDetails(Element element) => element.ShowDetails = !element.ShowDetails;
}
