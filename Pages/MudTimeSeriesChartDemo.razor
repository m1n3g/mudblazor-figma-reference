@page "/components/timeserieschart"
@using MudBlazor

<MudPaper Class="doc-section-component-container">
    <MudTimeSeriesChart ChartSeries="@_series" @bind-SelectedIndex="_index" LegendPosition="@LegendPosition"
        Width="@_width" Height="@_height" ChartOptions="@_options" AxisChartOptions="@_axisChartOptions"
        TimeLabelSpacing="TimeSpan.FromMinutes(5)" TimeLabelSpacingRounding="_roundedLabelSpacing"
        TimeLabelSpacingRoundingPadSeries="_roundedLabelSpacingPadSeries"
        DataMarkerTooltipTimeLabelFormat="yyyy MMM dd HH:mm:ss" CanHideSeries="_canHideSeries" />
</MudPaper>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.body1" Class="py-3">Selected: @(_index < 0 ? "None" : _series[_index].Name)</MudText>
    </MudItem>

    <MudItem xs="6" md="6">
        <MudCheckBox @bind-Value="_axisChartOptions.MatchBoundsToSize" Color="Color.Primary" Label="MatchBoundsToSize">
        </MudCheckBox>
        <MudCheckBox @bind-Value="_roundedLabelSpacing" Color="Color.Primary" Label="TimeLabelSpacing Rounding">
        </MudCheckBox>
        <MudCheckBox @bind-Value="_roundedLabelSpacingPadSeries" Color="Color.Primary"
            Label="TimeLabelSpacing Rounding - Pad Series"></MudCheckBox>
        <MudCheckBox T="bool" ValueChanged="(v) => _series.ForEach(x => x.ShowDataMarkers = v)" Color="Color.Primary"
            Label="Show Data Markers"></MudCheckBox>
        <MudSlider @bind-Value="_options.LineStrokeWidth" Min="1" Max="10">Line Width:
            @_options.LineStrokeWidth.ToString()</MudSlider>
        <MudSlider @bind-Value="_axisChartOptions.XAxisLabelRotation" Min="0" Max="90" Step="15">XAxis Label Rotation
        </MudSlider>
    </MudItem>

    <MudItem md="6" xs="6">
        <MudTextField @bind-Value="_width" Label="Chart Width"></MudTextField>
        <MudTextField Class="mt-3" @bind-Value="_height" Label="Chart Height"></MudTextField>
        <MudSelect Label="Legend Position" Variant="Variant.Outlined" Dense="true" T="@Position"
            ValueChanged="OnSelectedValue" Class="mt-6">
            <MudSelectItem T="Position" Value="Position.Top">Top</MudSelectItem>
            <MudSelectItem T="Position" Value="Position.Left">Left</MudSelectItem>
            <MudSelectItem T="Position" Value="Position.Right">Right</MudSelectItem>
            <MudSelectItem T="Position" Value="Position.Bottom">Bottom</MudSelectItem>
            <MudSelectItem T="Position" Value="Position.Start">Start</MudSelectItem>
            <MudSelectItem T="Position" Value="Position.End">End</MudSelectItem>
        </MudSelect>
        <MudSwitch @bind-Value="_canHideSeries" Color="Color.Secondary" Label="Hide Series" />
    </MudItem>

</MudGrid>

@code {
    private int _index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private ChartOptions _options = new ChartOptions
    {
        YAxisLines = false,
        YAxisTicks = 500,
        MaxNumYAxisTicks = 10,
        YAxisRequireZeroPoint = true,
        XAxisLines = false,
        LineStrokeWidth = 1,
    };

    private AxisChartOptions _axisChartOptions = new() { };

    private TimeSeriesChartSeries _chart1 = new();
    private TimeSeriesChartSeries _chart2 = new();
    private TimeSeriesChartSeries _chart3 = new();

    private List<TimeSeriesChartSeries> _series = new();

    private readonly Random _random = new Random();

    private bool _roundedLabelSpacing = false;
    private bool _roundedLabelSpacingPadSeries = false;

    private string _width = "650px";
    private string _height = "350px";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var now = DateTime.Now;
        _chart1 = new TimeSeriesChartSeries
        {
            Index = 0,
            Name = "Series 1",
            Data = Enumerable.Range(-360, 360).Select(x => new TimeSeriesChartSeries.TimeValue(now.AddSeconds(x * 10),
            _random.Next(6000, 15000))).ToList(),
            IsVisible = true,
            LineDisplayType = LineDisplayType.Line,
            DataMarkerTooltipTitleFormat = "{{X_VALUE}}",
            DataMarkerTooltipSubtitleFormat = "{{Y_VALUE}}"
        };

        _chart2 = new TimeSeriesChartSeries
        {
            Index = 1,
            Name = "Series 2",
            Data = Enumerable.Range(-360, 360).Select(x => new TimeSeriesChartSeries.TimeValue(now.AddSeconds(x * 10),
            _random.Next(0, 7000))).ToList(),
            IsVisible = true,
            LineDisplayType = LineDisplayType.Area,
            DataMarkerTooltipTitleFormat = "{{X_VALUE}}",
            DataMarkerTooltipSubtitleFormat = "{{Y_VALUE}}"
        };

        _chart3 = new TimeSeriesChartSeries
        {
            Index = 2,
            Name = "Series 3",
            Data = Enumerable.Range(-90, 60).Select(x => new TimeSeriesChartSeries.TimeValue(now.AddSeconds(x * 30),
            _random.Next(4000, 10000))).ToList(),
            IsVisible = true,
            LineDisplayType = LineDisplayType.Line,
            DataMarkerTooltipTitleFormat = "{{X_VALUE}}",
            DataMarkerTooltipSubtitleFormat = "{{Y_VALUE}}"
        };

        _series.Add(_chart1);
        _series.Add(_chart2);
        _series.Add(_chart3);

        StateHasChanged();
    }

    private bool _canHideSeries = true;

    public Position LegendPosition { get; set; } = Position.Bottom;

    private void OnSelectedValue(Position value)
    {
        switch (value)
        {
            case Position.Top:
                LegendPosition = Position.Top;
                break;
            case Position.Left:
                LegendPosition = Position.Left;
                break;
            case Position.Right:
                LegendPosition = Position.Right;
                break;
            case Position.Bottom:
                LegendPosition = Position.Bottom;
                break;
            case Position.Start:
                LegendPosition = Position.Start;
                break;
            case Position.End:
                LegendPosition = Position.End;
                break;
        }
    }
}