@page "/components/carousel"
@using MudBlazor

<MudText Typo="Typo.h6" Style="font-weight:700">MudCarousel</MudText>

<MudPaper Class="pa-4 my-3" Elevation="0" Style="background:#F5F5F5;">
    <MudGrid>

        <!-- LEFT: Controls -->
        <MudItem xs="12" md="4">
            <MudStack Spacing="2">
                <MudSwitch T="bool" @bind-Value="_showArrows" Label="Show Arrows" Color="Color.Primary" />
                <MudSwitch T="bool" @bind-Value="_showBullets" Label="Show Bullets" Color="Color.Primary" />
                <MudSwitch T="bool" @bind-Value="_enableSwipe" Label="Enable Swipe Gesture" Color="Color.Primary" />
                <MudSwitch T="bool" @bind-Value="_autoCycle" Label="Auto Cycle (Default: 5 secs)"
                    Color="Color.Primary" />

                <!-- NEW: Transition -->
                <MudSelect T="Transition" Label="Transition" Dense="true" @bind-Value="_transition">
                    <MudSelectItem Value="Transition.Fade">Fade</MudSelectItem>
                    <MudSelectItem Value="Transition.Slide">Slide</MudSelectItem>
                    <MudSelectItem Value="Transition.None">None</MudSelectItem>
                </MudSelect>

                <MudSlider Min="160" Max="600" Step="10" @bind-Value="_height" Color="Color.Info">
                    Height (@_height px)
                </MudSlider>

                <MudDivider Class="my-2" />

                <MudStack Direction="Row" Spacing="2">
                    <MudButton OnClick="AddAsync" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                    <MudButton OnClick="DeleteAsync" Variant="Variant.Filled" Color="Color.Error"
                        Disabled="@(_slides.Count == 0)">Delete</MudButton>
                </MudStack>

                <MudText Typo="Typo.caption" Class="mt-2">
                    Selected item (index: @_selectedIndex)
                </MudText>
            </MudStack>
        </MudItem>

        <!-- RIGHT: Preview -->
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4 d-flex align-center justify-center" Elevation="0">
                <!-- Explicit items: fixed hero at index 0, then dynamic slides -->
                <MudCarousel TData="object" Class="mud-width-full" Style="@($"height:{_height}px;")"
                    @bind-SelectedIndex="_selectedIndex" ShowArrows="@_showArrows" ShowBullets="@_showBullets"
                    EnableSwipeGesture="@_enableSwipe" AutoCycle="@_autoCycle">

                    <!-- 0: Hero slide -->
                    <MudCarouselItem Transition="@_transition">
                        <div class="d-flex text-center"
                            style="height:100%; background-color: var(--mud-palette-primary);">
                            <div class="mx-auto my-auto">
                                <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" Style="color:white;" />
                            </div>
                        </div>
                    </MudCarouselItem>

                    <!-- 1..N: Dynamic slides -->
                    @foreach (var s in _slides)
                    {
                        <MudCarouselItem Transition="@_transition">
                            @if (s.IsHero)
                            {
                                <!-- Newly added slides: primary background with icon -->
                                <div class="d-flex text-center"
                                    style="height:100%; background-color: var(--mud-palette-primary);">
                                    <div class="mx-auto my-auto">
                                        <MudIcon Icon="@Icons.Custom.Brands.GitHub" Size="Size.Large" Style="color:white;" />
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex" style="height:100%;">
                                    <MudImage Src="@s.Src" Alt="slide" Fluid="true" Class="mx-auto my-auto"
                                        @attributes="_noDragAttr"
                                        Style="user-select:none; -webkit-user-drag:none; -moz-user-select:none; -ms-user-select:none;" />
                                </div>
                            }
                        </MudCarouselItem>
                    }
                </MudCarousel>
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudPaper>

@code {
    // Toggles
    private bool _showArrows = true;
    private bool _showBullets = true; // If your build uses ShowDelimiters, rename both places.
    private bool _enableSwipe = true;
    private bool _autoCycle = true;

    // Transition (applies to all items)
    private Transition _transition = Transition.Fade;

    // Prevent image drag (so swipe works)
    private readonly Dictionary<string, object> _noDragAttr = new() { ["draggable"] = "false" };

    // Size
    private int _height = 280;

    // Selected index (0 is the fixed hero)
    private int _selectedIndex = 0;

    // Slide model
    private sealed class Slide
    {
        public bool IsHero { get; set; } // true => primary bg + icon
        public string? Src { get; set; } // image path when IsHero == false
    }

    // Initial slides: images after the fixed hero
    private readonly List<Slide> _slides = new()
{
new Slide { Src = "images/mony.jpg" },
new Slide { Src = "images/castle.jpg" },
new Slide { Src = "images/sweden.jpg" },
};

    // Add: insert a hero-style slide **at the current index**
    // (after translating from carousel index that includes the fixed hero)
    private async Task AddAsync()
    {
        // convert carousel index -> list index (after the fixed hero)
        var insertPos = Math.Clamp(_selectedIndex, 0, _slides.Count);
        _slides.Insert(insertPos, new Slide { IsHero = true });

        // select the newly inserted item (offset by the fixed hero)
        _selectedIndex = insertPos + 1;

        await Task.Delay(1);
    }

    private async Task DeleteAsync()
    {
        if (_slides.Count == 0) return;

        // Don't delete the fixed hero at index 0
        if (_selectedIndex == 0)
            return;

        // convert carousel index -> list index
        var listIndex = Math.Clamp(_selectedIndex - 1, 0, _slides.Count - 1);
        _slides.RemoveAt(listIndex);

        if (_slides.Count == 0)
        {
            _selectedIndex = 0; // back to the fixed hero
            return;
        }

        // Keep selection valid (still accounting for the fixed hero)
        _selectedIndex = Math.Min(_selectedIndex, _slides.Count);
        await Task.Delay(1);
    }
}
