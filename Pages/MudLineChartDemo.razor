@page "/components/linechart"
@using MudBlazor

<MudPaper Class="doc-section-component-container">
    <MudChart ChartType="ChartType.Line" ChartSeries="@_series" @bind-SelectedIndex="_index" XAxisLabels="@_xAxisLabels" Width="@_width" Height="@_height" ChartOptions="@_options" AxisChartOptions="_axisChartOptions" CanHideSeries="_canHideSeries"/>   
</MudPaper>

<MudGrid>
    <MudItem xs="12" class="mt-4">
        <MudButton Variant="Variant.Filled" @onclick="RandomizeData" Class="mr-4">Randomize Data</MudButton>
        <MudMenu Variant="Variant.Filled" Color="Color.Secondary" Label="Interpolation Algorithm" FullWidth="true">
            <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Straight)">Straight</MudMenuItem>
            <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.NaturalSpline)">Natural Spline</MudMenuItem>
            <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.EndSlope)">End Slope</MudMenuItem>
            <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Periodic)">Periodic</MudMenuItem>
        </MudMenu>
    </MudItem>
    
    <MudItem xs="12">
        <MudText Typo="Typo.body1" Class="py-2">Selected: @(_index < 0 ? "None" : _series[_index].Name)</MudText>
    </MudItem>

    <MudItem md="6" xs="6" Class="pl-2 pt-2">
        <MudCheckBox @bind-Value="_axisChartOptions.MatchBoundsToSize" Label="MatchBounds To Size"></MudCheckBox>
    </MudItem>

    <MudItem md="6" xs="6" Class="pl-2 pt-2">
        <MudCheckBox T="bool" ValueChanged="(v)=> _series.ForEach(x => x.ShowDataMarkers = v)" Label="Show Data Markers"></MudCheckBox>
    </MudItem>

    <MudItem md="6" xs="6" Class="pl-2 pt-2">
        <MudCheckBox T="bool" ValueChanged="(v)=> _series[0].LineDisplayType = v ? LineDisplayType.Area : LineDisplayType.Line" Label="Canada as Area"></MudCheckBox>
    </MudItem>

    <MudItem md="6" xs="6" Class="pl-2 pt-2">
        <MudCheckBox T="bool" ValueChanged="(v)=> _series[1].LineDisplayType = v ? LineDisplayType.Area : LineDisplayType.Line" Label="United Kingdom as Area"></MudCheckBox>
    </MudItem>

    <MudItem md="6" xs="6" Class="pl-2 pt-2">
        <MudCheckBox T="bool" ValueChanged="(v)=> _series[2].LineDisplayType = v ? LineDisplayType.Area : LineDisplayType.Line" Label="China as Area"></MudCheckBox>
    </MudItem>

    <MudItem md="6" xs="6" Class="pl-2 pt-2">
        <MudCheckBox T="bool" ValueChanged="(v)=> _series[3].LineDisplayType = v ? LineDisplayType.Area : LineDisplayType.Line" Label="United States as Area"></MudCheckBox>
    </MudItem>

    <MudItem md="6" xs="6" Class="pl-2 pt-2">
        <MudCheckBox T="bool" ValueChanged="(v)=> _series[4].LineDisplayType = v ? LineDisplayType.Area : LineDisplayType.Line" Label="Russia as Area"></MudCheckBox>
    </MudItem>

    <MudItem md="6" xs="6" Class="pl-2 pt-2">
        <MudCheckBox T="bool" ValueChanged="(v)=> _series[5].LineDisplayType = v ? LineDisplayType.Area : LineDisplayType.Line" Label="Taiwan as Area"></MudCheckBox>
    </MudItem>
    
    <MudItem md="6" xs="6">
        <MudTextField @bind-Value="_width" Label="Chart Width"></MudTextField>
    </MudItem>

    <MudItem md="6" xs="6">
        <MudTextField @bind-Value="_height" Label="Chart Height"></MudTextField>
    </MudItem>

    <MudItem md="6" xs="6">
        <MudSlider @bind-Value="_axisChartOptions.XAxisLabelRotation" Min="0" Max="90" Step="15">XAxis Label Rotation</MudSlider>
        <MudSlider @bind-Value="_options.YAxisTicks" Min="10" Max="400" Step="10" Color="Color.Info">Y-Axis Ticks: @_options.YAxisTicks.ToString()</MudSlider>
    </MudItem>

    <MudItem md="6" xs="6">
        <MudSlider @bind-Value="_options.LineStrokeWidth" Min="1" Max="10">Line Width: @_options.LineStrokeWidth.ToString()</MudSlider>
        <MudSwitch Class="mt-3" @bind-Value="_canHideSeries" Color="Color.Secondary" Label="Hide Series" />
    </MudItem>

</MudGrid>

@code {
    private int _index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private ChartOptions _options = new ChartOptions();
    private AxisChartOptions _axisChartOptions = new AxisChartOptions();
    private string _width = "650px";
    private string _height = "350px";

    private List<ChartSeries> _series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Canada", Data = new double[] { 30, 39, 36, 28, 18, 4, 3, 8, 21, 43 } },
        new ChartSeries() { Name = "United Kingdom", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 12, 0 } },
        new ChartSeries() { Name = "China", Data = new double[] { 83, 5, 1, 78, 43, 41, 34, 12, 100, 23 } },
        new ChartSeries() { Name = "United States", Data = new double[] { 72, 85, 12, 99, 4, 30, 56, 17, 88, 63 } },
        new ChartSeries() { Name = "Russia", Data = new double[] { 24, 75, 69, 64, 44, 61, 0, 22, 89, 55 } },
        new ChartSeries() { Name = "Taiwan", Data = new double[] { 57, 13, 92, 48, 76, 25, 6, 88, 34, 61 } },
    };
    private string[] _xAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct" };

    Random random = new Random();
    protected override void OnInitialized()
    {
        _options.InterpolationOption = InterpolationOption.Straight;
        _options.YAxisFormat = "c2";
    }

    public void RandomizeData()
    {
        foreach (var series in _series)
        {
            for (int i = 0; i < series.Data.Length - 1; i++)
            {
                series.Data[i] = random.NextDouble() * 100 + 10;
            }
        }

        StateHasChanged();
    }

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        _options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }

    private bool _canHideSeries = true;
}

