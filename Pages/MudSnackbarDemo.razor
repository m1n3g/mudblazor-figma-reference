@page "/components/snackbar"
@using MudBlazor
@inject ISnackbar Snackbar

<MudGrid GutterSize="GutterSize.Small">
    <!-- Col 1: Quick demos -->
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-3" Elevation="25">
            <MudText Typo="Typo.h6" Class="mb-2">Quick alerts</MudText>
            <MudStack Row="true" Spacing="2">
                <MudButton Color="Color.Dark"    OnClick="@(() => Show("The reactor type is RBMK-1000", Severity.Normal))">Normal</MudButton>
                <MudButton Color="Color.Info"    OnClick="@(() => Show("The reactor was fired up successfully", Severity.Info))">Info</MudButton>
                <MudButton Color="Color.Success" OnClick="@(() => Show("The reactor is running at optimum temperature", Severity.Success))">Success</MudButton>
                <MudButton Color="Color.Warning" OnClick="@(() => Show("The reactor temperature exceeds the optimal range", Severity.Warning))">Warning</MudButton>
                <MudButton Color="Color.Error"   OnClick="@(() => Show("Reactor meltdown is imminent", Severity.Error))">Error</MudButton>
            </MudStack>

            <MudDivider Class="my-3" />

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ShowFragment">
                Show RenderFragment snackbar
            </MudButton>
        </MudPaper>
    </MudItem>

    <!-- Col 2: Global configuration -->
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-3" Elevation="25">
            <MudText Typo="Typo.h6" Class="mb-2">Global settings</MudText>

            <MudSelect T="Variant" Label="Variant" @bind-Value="GlobalVariant">
                <MudSelectItem Value="Variant.Filled" />
                <MudSelectItem Value="Variant.Outlined" />
                <MudSelectItem Value="Variant.Text" />
            </MudSelect>

            <MudSelect T="string" Label="Position" @bind-Value="GlobalPositionClass" Class="mt-2">
                <MudSelectItem Value="@(Defaults.Classes.Position.TopLeft)">Top Left</MudSelectItem>
                <MudSelectItem Value="@(Defaults.Classes.Position.TopCenter)">Top Center</MudSelectItem>
                <MudSelectItem Value="@(Defaults.Classes.Position.TopRight)">Top Right</MudSelectItem>
                <MudSelectItem Value="@(Defaults.Classes.Position.BottomLeft)">Bottom Left</MudSelectItem>
                <MudSelectItem Value="@(Defaults.Classes.Position.BottomCenter)">Bottom Center</MudSelectItem>
                <MudSelectItem Value="@(Defaults.Classes.Position.BottomRight)">Bottom Right</MudSelectItem>
            </MudSelect>

            <MudStack Class="mt-2">
                <MudSwitch Color="Color.Primary" @bind-Value="PreventDuplicates">Prevent duplicates</MudSwitch>
                <MudSwitch Color="Color.Primary" @bind-Value="NewestOnTop">Newest on top</MudSwitch>
                <MudSwitch Color="Color.Primary" @bind-Value="ShowCloseIcon">Show close icon</MudSwitch>
                <MudSwitch Color="Color.Primary" @bind-Value="HideSeverityIcon">Hide severity icon (CSS)</MudSwitch>
            </MudStack>

            <MudGrid Class="mt-2">
                <MudItem xs="6">
                    <MudNumericField T="int" Label="Max displayed" @bind-Value="MaxDisplayed" Min="1" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField T="int" Label="Visible (ms)" @bind-Value="VisibleMs" Min="100" Step="500" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField T="int" Label="Show (ms)" @bind-Value="ShowMs" Min="0" Step="50" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField T="int" Label="Hide (ms)" @bind-Value="HideMs" Min="0" Step="50" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    <!-- Col 3: Per-snackbar severity + custom message -->
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-3" Elevation="25">
            <MudText Typo="Typo.h6" Class="mb-2">Per-snackbar overrides</MudText>

            <MudSelect T="Severity" Label="Severity" @bind-Value="SelectedSeverity">
                <MudSelectItem Value="Severity.Normal" />
                <MudSelectItem Value="Severity.Info" />
                <MudSelectItem Value="Severity.Success" />
                <MudSelectItem Value="Severity.Warning" />
                <MudSelectItem Value="Severity.Error" />
            </MudSelect>

            <MudTextField Class="mt-2" Label="Custom message" @bind-Value="CustomMessage" />
            <MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Secondary"
                       OnClick="@(() => Show(CustomMessage, SelectedSeverity))">
                Show custom snackbar
            </MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@* Optional CSS to hide the left severity icon for ALL snackbars *@
@if (HideSeverityIcon)
{
    <style>
        .mud-snackbar .mud-snackbar-icon { display: none !important; }
        .mud-snackbar .mud-snackbar-message { margin-left: 0 !important; }
    </style>
}

@code {
    // ----- Global config (applies to all snackbars) -----
    private Variant _globalVariant = Variant.Filled;
    private string _globalPositionClass = Defaults.Classes.Position.BottomRight;
    private bool _preventDuplicates = true;
    private bool _newestOnTop = true;
    private bool _showCloseIcon = true;
    private int _maxDisplayed = 5;
    private int _visibleMs = 5000;
    private int _showMs = 200;
    private int _hideMs = 200;

    private bool _hideSeverityIcon; // CSS-based toggle

    private Variant GlobalVariant { get => _globalVariant; set { _globalVariant = value; ApplyConfig(); } }
    private string GlobalPositionClass { get => _globalPositionClass; set { _globalPositionClass = value; ApplyConfig(); } }
    private bool PreventDuplicates { get => _preventDuplicates; set { _preventDuplicates = value; ApplyConfig(); } }
    private bool NewestOnTop { get => _newestOnTop; set { _newestOnTop = value; ApplyConfig(); } }
    private bool ShowCloseIcon { get => _showCloseIcon; set { _showCloseIcon = value; ApplyConfig(); } }
    private int MaxDisplayed { get => _maxDisplayed; set { _maxDisplayed = Math.Max(1, value); ApplyConfig(); } }
    private int VisibleMs { get => _visibleMs; set { _visibleMs = Math.Max(100, value); ApplyConfig(); } }
    private int ShowMs { get => _showMs; set { _showMs = Math.Max(0, value); ApplyConfig(); } }
    private int HideMs { get => _hideMs; set { _hideMs = Math.Max(0, value); ApplyConfig(); } }
    private bool HideSeverityIcon { get => _hideSeverityIcon; set { _hideSeverityIcon = value; StateHasChanged(); } }

    private void ApplyConfig()
    {
        var c = Snackbar.Configuration;
        c.SnackbarVariant        = _globalVariant;
        c.PositionClass          = _globalPositionClass;
        c.PreventDuplicates      = _preventDuplicates;
        c.NewestOnTop            = _newestOnTop;
        c.ShowCloseIcon          = _showCloseIcon;
        c.MaxDisplayedSnackbars  = _maxDisplayed;
        c.VisibleStateDuration   = _visibleMs;
        c.ShowTransitionDuration = _showMs;
        c.HideTransitionDuration = _hideMs;
    }

    protected override void OnInitialized() => ApplyConfig();

    // ----- Per-snackbar inputs -----
    private Severity SelectedSeverity { get; set; } = Severity.Normal;
    private string CustomMessage { get; set; } = "Hello from a customizable snackbar!";

    private void Show(string message, Severity severity)
    {
        // Overload with per-message configure action â€” use only properties supported by your version
        Snackbar.Add(message, severity, _ => { /* add per-snackbar overrides here if your version supports them */ });
    }

    private void ShowFragment()
    {
        Snackbar.Add(
            @<div>
                <h3 class="ma-0">Hi from a RenderFragment</h3>
                <ul class="ma-0">
                    <li>Regular item</li>
                    <li><strong>Bold</strong> item</li>
                    <li><em>Italic</em> item</li>
                </ul>
            </div>,
            SelectedSeverity
        );
    }
}
