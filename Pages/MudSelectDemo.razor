@page "/components/select"
@using System.Linq
@using MudBlazor

<MudGrid>
    <!-- Left: all variants — Start adornment -->
    <MudItem xs="12" md="4">
        <MudText Typo="Typo.subtitle1" Class="mb-2">Start adornment</MudText>
        <MudStack Spacing="4">
            @foreach (var variant in Enum.GetValues(typeof(Variant)).Cast<Variant>())
            {
                <MudSelect @bind-Value="_value" Variant="variant" Label="@variant.ToString()" Margin="_margin"
                    Dense="_dense" FitContent="_fitContent" Disabled="_disabled" ReadOnly="_readonly"
                    Placeholder="@(_placeholder ? "Placeholder" : null)" HelperText="@(_helperText ? "Helper Text" : null)"
                    HelperTextOnFocus="_helperTextOnFocus" Clearable="_clearable" Modal="_modal" Error="_hasError"
                    ErrorText="Please select a value" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search">
                    @foreach (var state in _states)
                    {
                        <MudSelectItem Value="@state">@state</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudStack>
    </MudItem>

    <!-- Middle: all variants — End adornment -->
    <MudItem xs="12" md="4">
        <MudText Typo="Typo.subtitle1" Class="mb-2">End adornment</MudText>
        <MudStack Spacing="4">
            @foreach (var variant in Enum.GetValues(typeof(Variant)).Cast<Variant>())
            {
                <MudSelect @bind-Value="_valueEnd" Variant="variant" Label="@($"{variant} (End)")" Margin="_margin"
                    Dense="_dense" FitContent="_fitContent" Disabled="_disabled" ReadOnly="_readonly"
                    Placeholder="@(_placeholder ? "Placeholder" : null)" HelperText="@(_helperText ? "Helper Text" : null)"
                    HelperTextOnFocus="_helperTextOnFocus" Clearable="_clearable" Modal="_modal" Error="_hasError"
                    ErrorText="Please select a value" Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Filled.ArrowDropDown">
                    @foreach (var state in _states)
                    {
                        <MudSelectItem Value="@state">@state</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudStack>
    </MudItem>

    <!-- Right: MultiSelect — Start & End samples -->
    <MudItem xs="12" md="4">
        <MudStack Spacing="3">
            <MudText Typo="Typo.subtitle1">MultiSelect (Start adornment)</MudText>
            <MudSelect T="string" Label="States (MultiSelect)" MultiSelection="true"
                SelectedValues="@_selectedStatesStart"
                SelectedValuesChanged="@(EventCallback.Factory.Create<IEnumerable<string>>(this, v => _selectedStatesStart = v?.ToHashSet() ?? new()))"
                Dense="@_dense" FitContent="@_fitContent" Disabled="@_disabled" ReadOnly="@_readonly"
                Placeholder="@(_placeholder ? "Choose states..." : null)"
                HelperText="@(_helperText ? "Pick one or more states" : null)" HelperTextOnFocus="@_helperTextOnFocus"
                Clearable="@_clearable" Modal="@_modal" Error="@_hasError" ErrorText="Please pick at least one"
                Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Public" MaxHeight="300"
                Class="mud-width-full">
                @foreach (var s in _states)
                {
                    <MudSelectItem Value="@s">@s</MudSelectItem>
                }
            </MudSelect>
            <MudText Typo="Typo.caption">Selected (@_selectedStatesStart.Count): @string.Join(", ",
                                _selectedStatesStart)</MudText>

            <MudText Typo="Typo.subtitle1" Class="mt-4">MultiSelect (End adornment)</MudText>
            <MudSelect T="string" Label="States (MultiSelect)" MultiSelection="true"
                SelectedValues="@_selectedStatesEnd"
                SelectedValuesChanged="@(EventCallback.Factory.Create<IEnumerable<string>>(this, v => _selectedStatesEnd = v?.ToHashSet() ?? new()))"
                Dense="@_dense" FitContent="@_fitContent" Disabled="@_disabled" ReadOnly="@_readonly"
                Placeholder="@(_placeholder ? "Choose states..." : null)"
                HelperText="@(_helperText ? "Pick one or more states" : null)" HelperTextOnFocus="@_helperTextOnFocus"
                Clearable="@_clearable" Modal="@_modal" Error="@_hasError" ErrorText="Please pick at least one"
                Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FilterList" MaxHeight="300"
                Class="mud-width-full">
                @foreach (var s in _states)
                {
                    <MudSelectItem Value="@s">@s</MudSelectItem>
                }
            </MudSelect>
            <MudText Typo="Typo.caption">Selected (@_selectedStatesEnd.Count): @string.Join(", ", _selectedStatesEnd)
            </MudText>

            <!-- Controls -->
            <MudSelect @bind-Value="_margin" Label="Margin">
                @foreach (var margin in Enum.GetValues(typeof(Margin)).Cast<Margin>())
                {
                    <MudSelectItem Value="margin">@margin</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
    </MudItem>
</MudGrid>

<MudStack Class="mt-5" Row="true" Spacing="3">
    <MudSwitch @bind-Value="_dense" Label="Dense" Color="Color.Primary" />
    <MudSwitch @bind-Value="_readonly" Label="ReadOnly" Color="Color.Primary" />
    <MudSwitch @bind-Value="_disabled" Label="Disabled" Color="Color.Primary" />
    <MudSwitch @bind-Value="_placeholder" Label="Placeholder" Color="Color.Primary" />
    <MudSwitch @bind-Value="_helperText" Label="HelperText" Color="Color.Primary" />
    <MudSwitch @bind-Value="_helperTextOnFocus" Label="HelperTextOnFocus" Color="Color.Primary" />
    <MudSwitch @bind-Value="_clearable" Label="Clearable" Color="Color.Primary" />
    <MudSwitch @bind-Value="_fitContent" Label="FitContent" Color="Color.Primary" />
    <MudSwitch @bind-Value="_modal" Label="Modal" Color="Color.Primary" />
    <MudSwitch @bind-Value="_hasError" Label="Show Error" Color="Color.Error" />
</MudStack>

@code {
    private string? _value; // for start-adornment singles
    private string? _valueEnd; // for end-adornment singles
    private Margin _margin;
    private bool _dense, _disabled, _readonly, _placeholder, _helperText, _helperTextOnFocus, _clearable, _fitContent;
    private bool _modal = true, _hasError;

    private HashSet<string> _selectedStatesStart = new();
    private HashSet<string> _selectedStatesEnd = new();

    private readonly string[] _states =
    {
    "fdbvebddddddddddddddddddddddddddddddddddddddddddddddddddddd",
    "Alabama","Alaska","Arizona","Arkansas","California",
    "Colorado","Connecticut","Delaware","Florida","Georgia",
    "Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas",
    "Kentucky","Louisiana","Maine","Maryland","Massachusetts",
    "Michigan","Minnesota","Mississippi","Missouri","Montana",
    "Nebraska","Nevada","New Hampshire","New Jersey","New Mexico",
    "New York","North Carolina","North Dakota","Ohio","Oklahoma",
    "Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota",
    "Tennessee","Texas","Utah","Vermont","Virginia",
    "Washington","West Virginia","Wisconsin","Wyoming"
};
}
