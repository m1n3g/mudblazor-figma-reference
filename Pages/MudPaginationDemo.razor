@page "/components/pagination"
@using System.Linq
@using MudBlazor

<MudStack Spacing="3">
    <!-- Table driven by the pagination -->
    <MudTable Items="@PagedItems" Dense="true" Hover="true" Bordered="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Role</MudTh>
            <MudTh>City</MudTh>
            <MudTh align="right">Price</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="#">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Role">@context.Role</MudTd>
            <MudTd DataLabel="City">@context.City</MudTd>
            <MudTd DataLabel="Price" Align="Align.Right">@context.Price.ToString("C")</MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTd ColSpan="5">
                Showing @FirstRowIndexâ€“@LastRowIndex of @_data.Count items
            </MudTd>
        </FooterContent>
    </MudTable>

    <!-- Pagination with full controls -->
    <MudPagination Class="mt-4" Color="Color.Primary" Count="@TotalPages" @bind-Selected="@_selected"
        Variant="@_variant" Disabled="@_disabled" Rectangular="@_rectangular" Size="@_size"
        ShowPreviousButton="@_previous" ShowNextButton="@_next" ShowFirstButton="@_first" ShowLastButton="@_last" />

    <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
        <MudText Align="Align.Center">Selected page: @_selected / @TotalPages</MudText>
        <MudSpacer />
        <MudSelect T="int" Dense Label="Rows per page" Value="@_pageSize" ValueChanged="OnPageSizeChanged"
            Style="width:160px">
            <MudSelectItem Value="5" />
            <MudSelectItem Value="10" />
            <MudSelectItem Value="25" />
            <MudSelectItem Value="50" />
        </MudSelect>
    </MudStack>

    <!-- Switches for state control -->
    <MudStack Row Spacing="2">
        <MudSwitch @bind-Value="_disabled" Color="Color.Primary" Label="Disabled" />
        <MudSwitch @bind-Value="_rectangular" Color="Color.Primary" Label="Rectangular" />
        <MudSwitch @bind-Value="_previous" Color="Color.Primary" Label="Previous" />
        <MudSwitch @bind-Value="_next" Color="Color.Primary" Label="Next" />
        <MudSwitch @bind-Value="_first" Color="Color.Primary" Label="First" />
        <MudSwitch @bind-Value="_last" Color="Color.Primary" Label="Last" />
    </MudStack>

    <!-- Variant select -->
    <MudSelect Dense T="Variant" @bind-Value="_variant" Label="Variant" Style="max-width:400px">
        <MudSelectItem Value="Variant.Text">Text</MudSelectItem>
        <MudSelectItem Value="Variant.Outlined">Outlined</MudSelectItem>
        <MudSelectItem Value="Variant.Filled">Filled</MudSelectItem>
    </MudSelect>

    <!-- Size select -->
    <MudSelect Dense T="Size" @bind-Value="_size" Label="Size" Style="max-width:400px">
        <MudSelectItem Value="Size.Small">Small</MudSelectItem>
        <MudSelectItem Value="Size.Medium">Medium</MudSelectItem>
        <MudSelectItem Value="Size.Large">Large</MudSelectItem>
    </MudSelect>

</MudStack>

@code {
    // Pagination state
    private int _selected = 1;
    private int _pageSize = 10;

    // UI state
    private bool _disabled = false;
    private bool _rectangular = false;
    private Variant _variant = Variant.Text;
    private Size _size = Size.Medium; // default medium
    private bool _previous = true;
    private bool _next = true;
    private bool _first = true;
    private bool _last = true;

    // Demo data
    private readonly List<Row> _data = Enumerable.Range(1, 97).Select(i => new Row
    {
        Id = i,
        Name = $"Item {i}",
        Role = new[] { "Engineer", "Designer", "Manager", "Analyst" }[(i - 1) % 4],
        City = new[] { "Kuala Lumpur", "Penang", "Johor Bahru", "Ipoh", "Melaka" }[(i - 1) % 5],
        Price = Math.Round(12 + (i * 1.37) % 88, 2)
    }).ToList();

    // Computed
    private int TotalPages => Math.Max(1, (int)Math.Ceiling((double)_data.Count / _pageSize));
    private IEnumerable<Row> PagedItems => _data.Skip((_selected - 1) * _pageSize).Take(_pageSize);

    private int FirstRowIndex => Math.Min((_selected - 1) * _pageSize + 1, _data.Count);
    private int LastRowIndex => Math.Min(_selected * _pageSize, _data.Count);

    private void OnPageSizeChanged(int size)
    {
        _pageSize = Math.Max(1, size);
        if (_selected > TotalPages)
            _selected = TotalPages; // clamp if page shrinks
    }

    public class Row
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Role { get; set; } = "";
        public string City { get; set; } = "";
        public double Price { get; set; }
    }
}
