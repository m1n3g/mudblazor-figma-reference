@page "/components/button"
@using MudBlazor

<MudGrid>
    <!-- LEFT: Options -->
    <MudItem md="4" xs="12">
        <MudPaper Class="pa-4" Elevation="0">
            <MudText Typo="Typo.h6" Class="mb-4" Style="font-weight:700">Button Options</MudText>

            <MudSelect T="Variant" Label="Variant" Dense="true" @bind-Value="_variant">
                <MudSelectItem Value="Variant.Filled">Filled</MudSelectItem>
                <MudSelectItem Value="Variant.Outlined">Outlined</MudSelectItem>
                <MudSelectItem Value="Variant.Text">Text</MudSelectItem>
            </MudSelect>

            <MudSelect T="Size" Label="Size" Dense="true" Class="mt-2" @bind-Value="_size">
                <MudSelectItem Value="Size.Small">Small</MudSelectItem>
                <MudSelectItem Value="Size.Medium">Medium</MudSelectItem>
                <MudSelectItem Value="Size.Large">Large</MudSelectItem>
            </MudSelect>

            <MudCheckBox @bind-Value="_dropShadow" Label="DropShadow" Color="Color.Primary" Class="mt-2" />
            <MudCheckBox @bind-Value="_fullWidth" Label="FullWidth" Color="Color.Primary" />
            <MudCheckBox @bind-Value="_useStartIcon" Label="StartIcon" Color="Color.Primary" />
            <MudCheckBox @bind-Value="_useEndIcon" Label="EndIcon" Color="Color.Primary" />

            <!-- NEW: keep loading forever until Reset is clicked -->
            <MudCheckBox @bind-Value="_continuousLoading" Label="Continuous loading" Color="Color.Primary" Class="mt-2" />
        </MudPaper>
    </MudItem>

    <!-- RIGHT: Preview -->
    <MudItem md="8" xs="12" Class="d-flex align-center justify-center">
        <MudPaper Class="pa-6" Elevation="0" Style="width:100%;max-width:800px;">

            <MudText Typo="Typo.subtitle1" Class="mb-2">Normal Button</MudText>
            <MudButton Color="Color.Primary" Variant="@_variant" Size="@_size" FullWidth="@_fullWidth"
                       DropShadow="@_dropShadow" StartIcon="@(_useStartIcon ? _startIcon : null)"
                       EndIcon="@(_useEndIcon ? _endIcon : null)">
                Submit
            </MudButton>

            <MudText Typo="Typo.subtitle1" Class="mt-6 mb-2">Loading Button</MudText>

            <div class="d-flex align-center">
                <MudButton Color="Color.Secondary" Variant="@_variant" Size="@_size" FullWidth="@_fullWidth"
                           DropShadow="@_dropShadow" StartIcon="@(_useStartIcon ? _startIcon : null)"
                           EndIcon="@(_useEndIcon ? _endIcon : null)" Disabled="@_processing" OnClick="ProcessSomething">

                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Click me</MudText>
                    }
                </MudButton>

                <!-- NEW: Reset button to stop loading immediately -->
                <MudButton Variant="Variant.Text" Color="Color.Error" Class="ml-3"
                           Disabled="@(!_processing)" OnClick="ResetLoading">
                    Reset Loading
                </MudButton>
            </div>

        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private Variant _variant = Variant.Filled;
    private Size _size = Size.Medium;

    private bool _dropShadow = true;
    private bool _fullWidth;
    private bool _useStartIcon;
    private bool _useEndIcon;

    // default icons (no picker)
    private readonly string _startIcon = Icons.Material.Filled.Add;
    private readonly string _endIcon   = Icons.Material.Filled.ArrowForward;

    // Loading state
    private bool _processing = false;
    private bool _continuousLoading = false;       // <-- option you can toggle
    private CancellationTokenSource? _loadingCts;  // for cancel/reset
    private readonly int _delayMs = 2000;          // your simulated work time

    private async Task ProcessSomething()
    {
        if (_processing) return;

        _processing = true;
        _loadingCts = new CancellationTokenSource();
        try
        {
            if (_continuousLoading)
            {
                // keep spinner running until ResetLoading() cancels
                await Task.Delay(Timeout.InfiniteTimeSpan, _loadingCts.Token);
            }
            else
            {
                await Task.Delay(_delayMs, _loadingCts.Token);
            }
        }
        catch (OperationCanceledException)
        {
            // expected when reset is clicked
        }
        finally
        {
            _processing = false;
            _loadingCts.Dispose();
            _loadingCts = null;
            StateHasChanged();
        }
    }

    private Task ResetLoading()
    {
        _loadingCts?.Cancel();   // cancels both finite and continuous waits
        return Task.CompletedTask;
    }
}
