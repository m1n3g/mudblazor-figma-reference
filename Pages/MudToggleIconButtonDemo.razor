@page "/components/toggleiconbutton"
@using MudBlazor

<MudGrid Gutter="Size.Medium">

    <!-- LEFT: examples -->
    <MudItem xs="12" md="8">
        <MudText Typo="Typo.subtitle1" Class="mb-2">Examples</MudText>

        <MudPaper Class="pa-3">
            <MudStack Spacing="2">

                <!-- Row of independent toggles -->
                <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Class="wrap-row">
                    <MudText Class="mr-2" Typo="Typo.subtitle2">Quick toggles:</MudText>

                    <!-- Favorite -->
                    <MudToggleIconButton
                        @bind-Toggled="_fav"
                        Icon="@Icons.Material.Outlined.FavoriteBorder"
                        ToggledIcon="@Icons.Material.Filled.Favorite"
                        Color="@_color" Size="@_size" Edge="@_edge"
                        Disabled="@_disabled" DisableRipple="@_disableRipple"
                        AriaLabel="Favorite" />

                    <!-- Visibility -->
                    <MudToggleIconButton
                        @bind-Toggled="_visible"
                        Icon="@Icons.Material.Outlined.VisibilityOff"
                        ToggledIcon="@Icons.Material.Filled.Visibility"
                        Color="@_color" Size="@_size" Edge="@_edge"
                        Disabled="@_disabled" DisableRipple="@_disableRipple"
                        AriaLabel="Visibility" />

                    <!-- Mic (mute) -->
                    <MudToggleIconButton
                        @bind-Toggled="_micOn"
                        Icon="@Icons.Material.Outlined.MicOff"
                        ToggledIcon="@Icons.Material.Filled.Mic"
                        Color="@_color" Size="@_size" Edge="@_edge"
                        Disabled="@_disabled" DisableRipple="@_disableRipple"
                        AriaLabel="Mic" />

                    <!-- Notifications -->
                    <MudToggleIconButton
                        @bind-Toggled="_notifications"
                        Icon="@Icons.Material.Outlined.NotificationsNone"
                        ToggledIcon="@Icons.Material.Filled.Notifications"
                        Color="@_color" Size="@_size" Edge="@_edge"
                        Disabled="@_disabled" DisableRipple="@_disableRipple"
                        AriaLabel="Notifications" />
                </MudStack>

                <!-- Live state preview -->
                <MudText Typo="Typo.caption" Class="mt-1">
                    Favorite: @_fav • Visible: @_visible • MicOn: @_micOn • Notifications: @_notifications
                </MudText>

                <MudDivider Class="my-2" />

                <!-- Dynamic toggle with selectable icon pair -->
                <MudStack Spacing="2">
                    <MudText Typo="Typo.subtitle2">Dynamic toggle (choose icon pair)</MudText>

                    <MudSelect T="string" Label="Icon pair" @bind-Value="_selectedPairKey" Dense="true" Style="max-width:280px;">
                        @foreach (var kv in _pairs.Keys)
                        {
                            <MudSelectItem Value="@kv">@kv</MudSelectItem>
                        }
                    </MudSelect>

                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                        <MudToggleIconButton
                            @bind-Toggled="_dynamicState"
                            Icon="@_pairs[_selectedPairKey].Off"
                            ToggledIcon="@_pairs[_selectedPairKey].On"
                            Color="@_color" Size="@_size" Edge="@_edge"
                            Disabled="@_disabled" DisableRipple="@_disableRipple"
                            AriaLabel="Dynamic toggle" />
                        <MudText Typo="Typo.body2">State: @_dynamicState</MudText>
                    </MudStack>
                </MudStack>

            </MudStack>
        </MudPaper>
    </MudItem>

    <!-- RIGHT: customization controls -->
    <MudItem xs="12" md="4">
        <MudText Typo="Typo.subtitle1" Class="mb-2">Controls</MudText>

        <MudPaper Class="pa-3">
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Class="controls-stack">
                <MudSwitch  Class="control-item" @bind-Value="_disabled"       Label="Disabled"        Color="Color.Primary" />
                <MudSwitch  Class="control-item" @bind-Value="_disableRipple"  Label="Disable Ripple"  Color="Color.Primary" />

                <MudSelect  T="Color" Label="Color"       @bind-Value="_color" Dense="true" Style="min-width:160px;">
                    @foreach (var c in Enum.GetValues(typeof(Color)).Cast<Color>())
                    {
                        <MudSelectItem Value="@c">@c</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect  T="Size"  Label="Size"        @bind-Value="_size"  Dense="true" Style="min-width:160px;">
                    @foreach (var s in Enum.GetValues(typeof(Size)).Cast<Size>())
                    {
                        <MudSelectItem Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect  T="Edge"  Label="Edge"        @bind-Value="_edge"  Dense="true" Style="min-width:160px;">
                    @foreach (var e in Enum.GetValues(typeof(Edge)).Cast<Edge>())
                    {
                        <MudSelectItem Value="@e">@e</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </MudPaper>
    </MudItem>

</MudGrid>

<style>
  /* make rows wrap nicely on small screens */
  .wrap-row { flex-wrap: wrap; }
  .controls-stack { display:flex; flex-wrap: wrap; }
  .controls-stack .control-item { min-width: 160px; }
</style>

@code {
    // Example states
    private bool _fav        = true;
    private bool _visible    = false;
    private bool _micOn      = false;
    private bool _notifications = true;

    // Dynamic toggle
    private bool _dynamicState = false;

    // Icon pairs (Off -> On)
    private readonly Dictionary<string, (string Off, string On)> _pairs = new()
    {
        ["Favorite"]     = (Icons.Material.Outlined.FavoriteBorder,     Icons.Material.Filled.Favorite),
        ["Visibility"]   = (Icons.Material.Outlined.VisibilityOff,      Icons.Material.Filled.Visibility),
        ["Mic"]          = (Icons.Material.Outlined.MicOff,             Icons.Material.Filled.Mic),
        ["Notifications"]= (Icons.Material.Outlined.NotificationsNone,  Icons.Material.Filled.Notifications),
        ["Bookmark"]     = (Icons.Material.Outlined.BookmarkBorder,     Icons.Material.Filled.Bookmark),
        ["Star"]         = (Icons.Material.Outlined.StarBorder,         Icons.Material.Filled.Star)
    };

    private string _selectedPairKey = "Favorite";

    // Controls
    private Color _color = Color.Primary;
    private Size  _size  = Size.Medium;
    private Edge  _edge  = Edge.Start;
    private bool  _disabled = false;
    private bool  _disableRipple = false;
}
