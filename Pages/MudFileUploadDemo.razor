@page "/components/fileupload"
@using Microsoft.AspNetCore.Components.Forms
@implements IDisposable
@using MudBlazor

<!-- Top-center success alert -->
@if (_showAlert)
{
    <MudAlert Severity="Severity.Success"
              Variant="Variant.Filled"
              Dense="true"
              Closeable="true"
              OnClose="() => _showAlert = false"
              Class="top-center-alert">
        @_alertText
    </MudAlert>
}

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   @ref="_fileUpload"
                   FilesChanged="OnFilesChanged"
                   AppendMultipleFiles
                   Hidden="false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   tabindex="-1"
                   @ondrop="ClearDragClass"
                   @ondragenter="SetDragClass"
                   @ondragleave="ClearDragClass"
                   @ondragend="ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="300px" Outlined="true" Class="@_dragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @foreach (var file in _fileNames)
                {
                    <MudChip T="string" Color="Color.Dark" Text="@file" tabindex="-1" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>

    <MudStack Row="true" Spacing="3">
        <MudButton Color="Color.Primary"
                   Disabled="_busy"
                   OnClick="OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Open file picker
        </MudButton>

        <MudButton Color="Color.Primary"
                   Disabled="@(_busy || !_fileNames.Any())"
                   OnClick="UploadAsync"
                   Variant="Variant.Filled">
            Upload
        </MudButton>

        <MudButton Color="Color.Error"
                   Disabled="@(_busy || !_fileNames.Any())"
                   OnClick="ClearAsync"
                   Variant="Variant.Filled">
            Clear
        </MudButton>
    </MudStack>

    <MudText Typo="Typo.subtitle2">Files selected: @_fileNames.Count</MudText>
</MudStack>

<MudText Typo="Typo.h6" Class="mt-10" Style="font-weight:700">Type of MudButton Upload</MudText>
<MudStack Row="true" Spacing="3" Class="my-2 align-center">
    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                Upload Files
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>

    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ActivatorContent>
            <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Image" Label="Load picture" />
        </ActivatorContent>
    </MudFileUpload>

    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ActivatorContent>
            <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.AttachFile" />
        </ActivatorContent>
    </MudFileUpload>

    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ActivatorContent>
            <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.PhotoCamera" />
        </ActivatorContent>
    </MudFileUpload>

    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Disabled>
        <ActivatorContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary">Disabled Button</MudButton>
        </ActivatorContent>
    </MudFileUpload>
</MudStack>

@if (_files.Any())
{
    <MudText Typo="Typo.h6">@_files.Count File@(_files.Count == 1 ? "" : "s"):</MudText>
    <MudList T="string">
        @foreach (var file in _files)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}

<style>
.top-center-alert {
    position: fixed;
    top: 16px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1400;
    min-width: 280px;
}
</style>

@code {
    // single-file demo list (kept from your sample)
    private readonly IList<IBrowserFile> _files = new List<IBrowserFile>();

    // main uploader state
    private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    // UI / alerts
    private bool _busy;
    private bool _showAlert;
    private string _alertText = string.Empty;

    // drag styles
    private const string DefaultDragClass =
        "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    // disposal guard for delayed tasks
    private bool _disposed;
    public void Dispose() => _disposed = true;

    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        StateHasChanged();
    }

    private void OnFilesChanged(IReadOnlyList<IBrowserFile> files)
    {
        _fileNames.Clear();
        foreach (var f in files)
            _fileNames.Add(f.Name);

        ClearDragClass();
        StateHasChanged();
    }

    private async Task UploadAsync()
    {
        if (_fileNames.Count == 0 || _busy) return;
        _busy = true;
        try
        {
            // TODO: perform upload

            _alertText = $"Uploaded {_fileNames.Count} file{(_fileNames.Count == 1 ? "" : "s")} successfully.";
            _showAlert = true;
            StateHasChanged();

            // clear picker on UI thread
            if (_fileUpload is not null)
                await InvokeAsync(async () => await _fileUpload.ClearAsync());

            _fileNames.Clear();
            ClearDragClass();
            StateHasChanged();
        }
        catch (ObjectDisposedException) { /* ignore if user navigated */ }
        catch (InvalidOperationException) { /* ignore render-thread races */ }
        catch (Exception ex)
        {
            _alertText = $"Upload failed: {ex.Message}";
            _showAlert = true;
            StateHasChanged();
        }
        finally
        {
            _busy = false;
        }

        _ = HideAlertSoonAsync();
    }

    private async Task ClearAsync()
    {
        if (_busy) return;
        _busy = true;
        try
        {
            if (_fileUpload is not null)
                await InvokeAsync(async () => await _fileUpload.ClearAsync());
        }
        catch (ObjectDisposedException) { }
        catch (InvalidOperationException) { }
        finally
        {
            _fileNames.Clear();
            ClearDragClass();
            _busy = false;
            if (!_disposed) await InvokeAsync(StateHasChanged);
        }
    }

    private Task OpenFilePickerAsync()
        => _busy ? Task.CompletedTask : (_fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask);

    private async Task HideAlertSoonAsync()
    {
        try { await Task.Delay(2500); } catch { }
        if (_disposed) return;
        _showAlert = false;
        await InvokeAsync(StateHasChanged);
    }

    private void SetDragClass()   => _dragClass = $"{DefaultDragClass} mud-border-primary";
    private void ClearDragClass() => _dragClass = DefaultDragClass;
}
