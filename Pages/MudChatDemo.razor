@page "/components/chat"
@inject ISnackbar Snackbar
@inject IScrollListenerFactory ScrollListenerFactory

<MudGrid>
    <MudItem xs="12" Class="justify-center">
        <MudStack>
            <!-- Obi-Wan & Anakin Chat -->
            @{
                var orderedGroups = messages
                    .OrderByDescending(m => m.Time)
                    .GroupBy(m => m.Name)
                    .ToList();

                for (int i = 0; i < orderedGroups.Count; i++)
                {
                    var group = orderedGroups[i];
                    var position = i == 0 ? ChatBubblePosition.Start : ChatBubblePosition.End;

                    <MudChat Color="_selectedColor"
                             Dense="@_dense"
                             Elevation="@_elevation"
                             Variant="@_variant"
                             Square="_square"
                             ArrowPosition="_selectedArrowPosition"
                             ChatPosition="@position">

                        <MudAvatar Size="@(_dense ? Size.Small : Size.Medium)">
                            @group.First().Initials
                        </MudAvatar>
                        <MudChatHeader Name="@group.Key" Time="@group.First().Time" />

                        @foreach (var message in group.OrderByDescending(m => m.Time))
                        {
                            <MudChatBubble OnClick="@((args) => ClickMessage(args, message))"
                                           OnContextClick="@((args) => RightClickMessage(args, message))"
                                           @onmouseenter="@((args) => HoverStart(args, message))"
                                           @onmouseleave="@(() => HoverStop("bubble"))">

                                @message.Text

                                <!-- Hover popover with reactions -->
                                <MudPopover Open="@(Hovering && message.Equals(_hoverMessage))"
                                            Class="hoverarea"
                                            AnchorOrigin="Origin.CenterRight"
                                            TransformOrigin="Origin.BottomRight"
                                            @onscroll="@(() => HoverStop("scroll"))"
                                            @onmouseenter="@(() => _paperHovering = true)"
                                            @onmouseleave="@(() => HoverStop("paper"))">

                                    <div class="d-flex" style="width: 100%;" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                        <span class="emoji" @onclick="@(() => MessageAction("liked"))">üëç</span>
                                        <span class="emoji" @onclick="@(() => MessageAction("cried"))">üò≠</span>
                                        <span class="emoji" @onclick="@(() => MessageAction("angered"))">üëø</span>
                                        <MudDivider Class="mx-1" Vertical="true" FlexItem="true" />
                                        <MudTooltip Text="Reply">
                                            <span class="emoji" @onclick="@Reply">‚Ü©Ô∏è</span>
                                        </MudTooltip>
                                    </div>
                                </MudPopover>
                            </MudChatBubble>

                            <!-- Footer showing reaction counts -->
                            <MudChatFooter>
                                <MudPaper Class="actionarea" Elevation="0">
                                    <div class="d-flex" style="width: 100%;" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                        @if (message.Likes > 0)
                                        {
                                            <span class="emoji">üëç</span> @message.Likes
                                        }
                                        @if (message.Cries > 0)
                                        {
                                            <span class="emoji">üò≠</span> @message.Cries
                                        }
                                        @if (message.Angers > 0)
                                        {
                                            <span class="emoji">üëø</span> @message.Angers
                                        }
                                    </div>
                                </MudPaper>
                            </MudChatFooter>
                        }
                    </MudChat>
                }
            }

            <!-- UI controls for testing -->
            <MudStack Row Class="mt-3">
                <MudCheckBox Label="Dense" @bind-Value="_dense" />
                <MudCheckBox Label="Square" @bind-Value="_square" />
            </MudStack>
            <MudRadioGroup @bind-Value="_variant">
                <MudRadio Value="@Variant.Text" Label="Text" />
                <MudRadio Value="@Variant.Outlined" Label="Outlined" />
                <MudRadio Value="@Variant.Filled" Label="Filled" />
            </MudRadioGroup>
            <MudStack Row Class="ml-4" Style="max-width:600px;">
                <MudSelect Class="mr-1" T="MudBlazor.Color" Label="Chat Color" @bind-Value="_selectedColor">
                    @foreach (MudBlazor.Color color in Enum.GetValues(typeof(MudBlazor.Color)))
                    {
                        <MudSelectItem Value="@color">@color.ToString()</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="MudBlazor.ChatArrowPosition" Label="Chat Arrow" @bind-Value="_selectedArrowPosition">
                    @foreach (MudBlazor.ChatArrowPosition pos in Enum.GetValues(typeof(MudBlazor.ChatArrowPosition)))
                    {
                        <MudSelectItem Value="@pos">@pos.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            <MudSlider @bind-Value="_elevation" Min="0" Max="25" Color="Color.Info" Class="ml-4 mb-6" Style="max-width:600px;">
                Elevation: @_elevation.ToString()
            </MudSlider>
        </MudStack>
    </MudItem>
</MudGrid>

<MudMenu PositionAtCursor="true" @ref="_contextMenu" id="_contextMenu">
    <MudMenuItem Icon="@Icons.Material.Filled.Block" OnClick="@BanUser"> Ban @_selectedMessage?.Name </MudMenuItem>
    <MudMenuItem Icon="@Icons.Material.Filled.Info" OnClick="@ShowHiddenInfo"> View Details for @_selectedMessage?.Name </MudMenuItem>
</MudMenu>

<style>
    .hoverarea {
        cursor: pointer !important;
        background-color: var(--mud-palette-appbar-background);
        color: var(--mud-palette-appbar-text);
        transition: opacity 0.3s ease;
        opacity: .8;
    }
    .actionarea {
        background-color: var(--mud-palette-appbar-background);
        color: var(--mud-palette-appbar-text);
    }
    span.emoji {
        font-size: 12px;
        padding: 1px 1px;
        align-self: center;
    }
</style>

@code {
    private bool _dense = false;
    private bool _square = false;
    private int _elevation = 5;
    private Variant _variant = Variant.Text;
    private Color _selectedColor = Color.Default;
    private ChatArrowPosition _selectedArrowPosition = ChatArrowPosition.Top;

    private List<Message> messages = new();
    private Message? _selectedMessage;
    private MudMenu? _contextMenu;
    private IScrollListener? _scrollListener;
    private bool _bubbleHovering;
    private bool _paperHovering;
    private Message? _hoverMessage;

    private bool Hovering => _paperHovering || _bubbleHovering;

    protected override void OnInitialized()
    {
        _scrollListener = ScrollListenerFactory.Create(null);
        _scrollListener.OnScroll += OnScrollAsync;

        // Preload Obi-Wan vs Anakin dialogue
        messages.Add(new Message("Obi-Wan Kenobi", "OK", "You were my brother Anakin.", "2 hours ago"));
        messages.Add(new Message("Obi-Wan Kenobi", "OK", "I loved you.", "2 hours ago"));
        messages.Add(new Message("Anakin Skywalker", "AS", "I'm sorry.", "1 hour ago"));
    }

    private void OnScrollAsync(object? sender, ScrollEventArgs e) => HoverStop("scroll");

    public void Dispose()
    {
        if (_scrollListener != null)
            _scrollListener.OnScroll -= OnScrollAsync;
    }

    private void HoverStart(MouseEventArgs args, Message message)
    {
        _bubbleHovering = true;
        _hoverMessage = message;
    }

    private void HoverStop(string typeOfStop)
    {
        switch (typeOfStop)
        {
            case "paper": _paperHovering = false; break;
            case "bubble": _bubbleHovering = false; break;
            case "scroll": _paperHovering = false; _bubbleHovering = false; StateHasChanged(); break;
        }
    }

    private void MessageAction(string actionType)
    {
        if (_hoverMessage is null) return;

        switch (actionType)
        {
            case "liked": _hoverMessage.Likes++; break;
            case "cried": _hoverMessage.Cries++; break;
            case "angered": _hoverMessage.Angers++; break;
        }
    }

    private void Reply()
    {
        if (_hoverMessage is null)
            Snackbar.Add("No message available!", Severity.Warning);
        else
            Snackbar.Add($"Simulate Reply: To: {_hoverMessage.Name}", Severity.Success);
    }

    private void ShowHiddenInfo()
    {
        if (_selectedMessage is not null)
            Snackbar.Add($"Hidden information for {_selectedMessage.Name}", Severity.Info);
    }

    private void BanUser()
    {
        if (_selectedMessage is not null)
            Snackbar.Add($"{_selectedMessage.Name} has been banned!", Severity.Error);
    }

    private async Task RightClickMessage(MouseEventArgs args, Message message)
    {
        _selectedMessage = message;
        if (_contextMenu != null)
            await _contextMenu.OpenMenuAsync(args);
    }

    private async Task ClickMessage(MouseEventArgs args, Message message)
    {
        _selectedMessage = message;
        Snackbar.Add("Message clicked: " + message.Text, Severity.Info);
        await Task.CompletedTask;
    }

    private record Message(string Name, string Initials, string Text, string Time, int Likes = 0, int Cries = 0, int Angers = 0)
    {
        public int Likes { get; set; } = Likes;
        public int Cries { get; set; } = Cries;
        public int Angers { get; set; } = Angers;
    }
}
